<?php

include_once("modules/constantes.inc");
//userelation("atkmanytoonerelation");

class productos extends atkNode {

    function productos($name = "productos", $flags = 0) {
        $this->atkNode($name, $flags | NF_ADD_LINK | NF_EDITAFTERADD | NF_MRA);

        $this->add(new atkNumberAttribute("id", AF_AUTOKEY));
        $this->add(new atkNumberAttribute("codigoProducto", AF_OBLIGATORY));
        $this->add(new atkAttribute("nombreProducto", AF_OBLIGATORY | AF_SEARCHABLE, 30));
        $this->add(new atkAttribute("descripcion", 0, 100));
        $this->add(new atkCurrencyAttribute("precio", AF_OBLIGATORY, 0, "$", 2));
        $this->add(new atkNumberAttribute("cantidad"));
        $this->add(new atkNumberAttribute("stockMinimo", AF_OBLIGATORY));

        // Foraneas
        $this->add(new atkManyToOneRelation("marcaId", "productos.marca", AF_OBLIGATORY | AF_RELATION_AUTOLINK));
        $this->add(new atkManyToOneRelation("tipoProductoId", "productos.tiposProducto", AF_OBLIGATORY | AF_RELATION_AUTOLINK | AF_SEARCHABLE));

        $datosEspecificos = &new atkOneToManyRelation("datosProductoId", "productos.datosProductos", "productoId", AF_HIDE_LIST);
        $datosEspecificos->setDestinationFilter("productoId");
        $this->add($datosEspecificos, "Datos_especificos");

        global $ATK_VARS;
        $tipoProducto = $ATK_VARS["atkdg"]["admin"]["atksearch"]["tipoProductoId"]["tipoProductoId"][0];
        atk_var_dump($ATK_VARS);
        if ($tipoProducto != NULL) {
            $db = &atkGetDb();
            $query = "SELECT adp.nombreAtributo, dp.valorAtributo, dp.tipoAtributo
          FROM atributosDeProductos adp 
          join tiposAtributosDeProductos tap
          join datosproductos dp
          where adp.atributoId = tap.atributoId
          and adp.nombreAtributo = dp.nombreAtributo
          and tap.tipoProductoId =$tipoProducto;";
            $result = $db->getrows($query);
            foreach ($result as $row) {
                $this->add(new atkDummyAttribute($row["nombreAtributo"], $row["valorAtributo"] . $row["tipoAtributo"], 0));
            }
        }

        $this->setTable("productos", "productos");
        $this->setDescriptorTemplate("[nombreProducto]");
    }

    // Devuelve el nextid y lo aumenta en 1
    // TODO poner en utils
    function incrementSequence($tabla) {
        $db = &atkGetDb();

        $result = $db->getrows("SELECT nextid from db_sequence where seq_name = '$tabla';");

        if ($result == NULL) {
            $db->query("INSERT INTO db_sequence (seq_name, nextid) VALUES ('$tabla', 2);");
            $seq = 1;
        } else {
            $newId = $result[0]["nextid"] + 1;
            $db->query("UPDATE db_sequence set nextid =$newId where seq_name = '$tabla';");
            $seq = $result[0]["nextid"];
        }

        $db->commit();
        return $seq;
    }

    function postAdd($record) {
        $db = &atkGetDb();
        $tipoProductoId = $record["tipoProductoId"]["id"];

        $query = "SELECT adp.atributoId, adp.nombreAtributo, adp.tipoAtributo
                FROM atributosDeProductos adp 
                join tiposAtributosDeProductos tap
                where adp.atributoId = tap.atributoId 
                and tap.tipoProductoId =$tipoProductoId;";

        $atributosProducto = $db->getrows($query);
        atk_var_dump($atributosProducto, "Resultado!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

        foreach ($atributosProducto as $row) {
            $nombreAtributo = $row["nombreAtributo"];
            $tipoAtributo = $row["tipoAtributo"];
            $productoId = $record["id"];
            $datosProductosId = $this->incrementSequence("datosProductos");

//TODO actualizar modelo de datos campo tipoAtributo es string

            $query = "INSERT INTO datosProductos (nombreAtributo, tipoAtributo, productoId, datosProductosId) 
                  VALUES ( '$nombreAtributo' , '$tipoAtributo', $productoId, $datosProductosId);";
            $db->query($query);
            $db->commit();
        }
    }

    function recordActions($record, &$actions, &$mraactions) {
        $mraactions["mra_editar_precio"] = "mra_editar_precio";
    }

    function aumentar10porciento($productoId) {
        $db = &atkGetDb();
        $query = "SELECT p.precio FROM productos p WHERE p.id = $productoId";
        $row = $db->getrows($query);
        $precioAnterior = $row[0]["precio"];
        $precio_nuevo = $precioAnterior * 1.1;
        $db->query("UPDATE productos SET precio = $precio_nuevo WHERE id = $productoId");
    }
    
    function action_mra_editar_precio() {        
        if (is_array($this->m_postvars['atkselector'])) {
          foreach ($this->m_postvars['atkselector'] as $selector) {
            $aux = explode("=", $selector);
            $procudtoId = $aux[1];
            $this->aumentar10porciento($procudtoId);   
          }
          }
          $this->redirect();
    }
    
    function rowColor($record) {
        $stockMinimo = intval($record["stockMinimo"]);
        $stockActual = intval($record["cantidad"]);
        
        if($stockActual == 0)
            return array(ROJO, ROJO_HIGHLIGHT); 
        
        if (intval($stockActual) <= intval($stockMinimo)) {
            return array(NARANJA, NARANJA_HIGHLIGHT);
        }
        return array(BLANCO);
    }

}
